pipeline {
  agent any

  environment {
    // Vault pulls (see https://plugins.jenkins.io/hashicorp-vault/)
    DOCKERHUB_USER = vault path: 'secret/nstapp/dockerhub', key: 'username'
    DOCKERHUB_PASS = vault path: 'secret/nstapp/dockerhub', key: 'password'
    GITHUB_TOKEN   = vault path: 'secret/nstapp/github',   key: 'token'
    // KUBECONFIG_B64 = vault path: 'secret/nstapp/kubeconfig', key: 'kubeconfig'
  }

  options {
    timestamps()
  }

  stages {
    stage('Login to Docker') {
      steps {
        // Log in to Docker Hub using Vault-provided creds
        sh '''
          echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
        '''
      }
    }

    stage('Checkout from GitHub') {
      steps {
        // Use a token to clone the private/public repo (branch "devops")
        // Ensure the repo URL is accessible via HTTPS + token
        sh '''
          git config --global credential.helper store
          git clone --branch devops \
            https://$GITHUB_TOKEN@github.com/Deepanshu09-max/NST_app.git .
        '''
      }
    }

    stage('Lint & Unit Tests') {
      parallel {
        stage('Python Lint') {
          steps {
            sh 'flake8 . || true'
          }
        }
        stage('JS Lint (frontend)') {
          when { expression { fileExists('frontend/package.json') } }
          steps {
            dir('frontend') {
              sh 'npm ci && npm run lint || true'
            }
          }
        }
        stage('Python Unit Tests') {
          steps {
            sh '''
              pytest -q routing_service || true
              pytest -q inference_services || true
            '''
          }
        }
      }
    }

    stage('Build & Push Images') {
      steps {
        script {
          docker.withRegistry("https://index.docker.io/v1/", "${DOCKERHUB_USER}:${DOCKERHUB_PASS}") {
            // 1) Build & push the shared tf-base image
            def baseImg = docker.build(
              "${DOCKERHUB_USER}/nst_app/tf-base:2.11.0-cpu",
              "docker/base-tf"
            )
            baseImg.push()

            // 2) Build & push each service image
            def services = [
              'frontend',
              'routing_service',
              'fine_tuning_service',
              'inference_services/model1',
              'inference_services/model2',
              'inference_services/model3',
              'inference_services/model4'
            ]

            for (svc in services) {
              def tagSuffix = svc.replaceAll('/', '-')
              def imageName = "${DOCKERHUB_USER}/nst_app:${tagSuffix}"
              def img = docker.build(imageName, svc)
              img.push()
            }
          }
        }
      }
    }

    stage('Deploy to Staging') {
      steps {
        // Launch all services via docker-compose in detached mode
        sh '''
          echo "Deploying to STAGING via docker-compose..."
          docker-compose -f docker-compose.yml up -d
        '''
      }
    }

    stage('Integration Tests') {
      steps {
        // Assumes run_integration_tests.sh is executable and at repo root
        sh './run_integration_tests.sh'
      }
    }
  }

  post {
    success {
      echo 'ðŸŸ¢ NST_App pipeline succeeded.'
    }
    failure {
      echo 'ðŸ”´ NST_App pipeline failed.'
    }
    always {
      sh 'docker system prune -f || true'
    }
  }
}
