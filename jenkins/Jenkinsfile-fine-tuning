pipeline {
  agent any

  parameters {
    string(name: 'TRIGGERED_BY',       defaultValue: '',       description: 'Build number that triggered this')
    string(name: 'MODEL_NAME',         defaultValue: 'model4', description: 'Which model to fine‚Äëtune')
    string(name: 'EPOCHS',             defaultValue: '2',      description: 'Number of epochs')
    string(name: 'BATCH_SIZE',         defaultValue: '2',      description: 'Batch size')
    string(name: 'IMAGE_SIZE',         defaultValue: '256',    description: 'Image size')
    string(name: 'LEARNING_RATE',      defaultValue: '0.001',  description: 'Learning rate')
    string(name: 'STYLE_WEIGHT',       defaultValue: '1e5',    description: 'Style loss weight')
    string(name: 'CONTENT_WEIGHT',     defaultValue: '1.0',    description: 'Content loss weight')
    string(name: 'SERVICE_URL',        defaultValue: 'http://localhost:8005/finetune',
                                                    description: 'Fine‚Äëtune service endpoint')
    booleanParam(name: 'RETRIGGER_MAIN', defaultValue: true,      description: 'Re‚Äëtrigger NST_App on success?')
  }

  environment {
    GIT_CREDENTIALS_ID     = 'github-creds'
    GIT_REPO               = 'git@github.com:your-org/your-repo.git'
    NST_APP_JOB_NAME       = 'NST_App'
  }

  options {
    timestamps()
    timeout(time: 6, unit: 'HOURS')
    buildDiscarder(logRotator(numToKeepStr: '5'))
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'main',
            credentialsId: env.GIT_CREDENTIALS_ID,
            url:          env.GIT_REPO
      }
    }

    stage('Trigger Fine‚ÄëTuning Service') {
      steps {
        script {
          def payload = """
          {
            "model_name": "${params.MODEL_NAME}",
            "epochs": ${params.EPOCHS},
            "batch_size": ${params.BATCH_SIZE},
            "image_size": ${params.IMAGE_SIZE},
            "lr": ${params.LEARNING_RATE},
            "style_weight": ${params.STYLE_WEIGHT},
            "content_weight": ${params.CONTENT_WEIGHT}
          }
          """.trim()

          echo "‚û°Ô∏è  Sending fine‚Äëtune request to ${params.SERVICE_URL}"
          sh """
            curl -X POST ${params.SERVICE_URL} \\
                 -H 'Content-Type: application/json' \\
                 -d '${payload}'
          """
        }
      }
    }

    stage('Publish Trigger Info') {
      steps {
        echo "‚úÖ Requested fine‚Äëtuning for `${params.MODEL_NAME}` (triggered by #${params.TRIGGERED_BY})."
      }
    }
  }

  post {
    success {
      echo "üèÜ FineTuneModels succeeded (build #${env.BUILD_NUMBER})."

      script {
        if (params.RETRIGGER_MAIN) {
          echo "üîÅ Re‚Äëtriggering main pipeline: ${env.NST_APP_JOB_NAME}"
          build job: env.NST_APP_JOB_NAME,
                parameters: [
                  string(name: 'TRIGGERED_BY_FINE_TUNE', value: env.BUILD_NUMBER)
                ],
                wait: false,
                propagate: false,
                quietPeriod: 30
        }
      }
    }
    failure {
      mail to: 'you@example.com',
           subject: "üí• FineTuneModels failed (#${env.BUILD_NUMBER})",
           body: "Check logs: ${env.BUILD_URL}"
    }
    always {
      echo "üèÅ FineTuneModels pipeline done."
    }
  }
}